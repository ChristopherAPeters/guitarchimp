#!/usr/bin/python
#Note: tested with Python versions 2.6.2, 2.7.1.  
#
#1. Grab & display banner from a web server.  
#2. Print list of URLs found within HTML body.
import socket
import sys
import string
import re
from HTMLParser import HTMLParser

class MyHTMLParser(HTMLParser):
   
    divTagFound = 0
    def handle_starttag(self, tag, attrs):
	if tag == 'div':
		for attr in attrs:
			if attr[0] == 'class' and attr[1] == 'legal':
				self.divTagFound=1
	if tag == 'a':
		for attr in attrs:
			if attr[0] == 'href':
				m = re.search(r"(?:http|ftp|mailto):\/\/",attr[1])
				if m:
					urls.append(attr[1])
    def handle_endtag(self, tag):
	if self.divTagFound:
		self.divTagFound=0

    def handle_data(self, data):
	if self.divTagFound:
	        print "Located tag data :", data

def stripped(x):
    return "".join([i for i in x if ord(i) in range(32, 127)])

def display_urls(urls):
	for url in urls:
		print "URL found:",url

def display_banner(message):
    t = ''    
    banner = ''
    for line in message.split('\n'):
    	m = re.search(r"Date: (.+)",line)
	if m:
          t=stripped(m.group(1)) 
        
        n = re.search(r"Server: (.+)",line)
	if n:
          banner = stripped(n.group(1))    
  
    a="{0} ({1})".format(banner,t) 
    print "banner:", a
    return(0,"OK")

def parse_response(message):
    header = ''
    body = ''
    headerparsed = 0
    for line in message.split('\n'):
    	if headerparsed:
       	 body += line
       	 body += '\n'
        else:
         header += line
         header += '\n' 
    
    	m = re.search(r'\r',line)
	if len(line) == 1 and m:
       		headerparsed = 1
    
    return (header,body)

if __name__ == '__main__':

#  get command line args

    numargs = len(sys.argv)
    if (numargs > 1):
        url = sys.argv[1];
    else:
	print 'Program requires 1 argument:  URL of website'
	exit(1)

    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        client_socket.connect((url,80))
        http_request = '{0}{1} {2}{3}{4}'.format("GET http://",url,"HTTP/1.1\r\nHost: ",url,"\r\nAccept: */*\r\n\r\n")
#        print http_request
#        client_socket.send("GET http://arrl.org/ HTTP/1.1\r\nHost: arrl.org\r\nAccept: */*\r\n\r\n")
        client_socket.send(http_request)
        data = client_socket.recv(1024)
        client_socket.close()
    except socket.error as msg:
        client_socket.close()
        sys.stderr.write("Error: %s\n" % (msg))

    (header,body)=parse_response(data)
    display_banner(header)

#    print "Data: ",data
    urls = [] 
    try:
	parser = MyHTMLParser()
	parser.feed(body)
    except Exception, (e):
	print "Error parsing HTML body: ", e
    finally:
	display_urls(urls)

